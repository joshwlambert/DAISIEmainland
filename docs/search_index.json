[["index.html", "DAISIEmainland: Simulating and analysing macroevolution on island with a dynamic mainland DAISIEmainland guide Overview", " DAISIEmainland: Simulating and analysing macroevolution on island with a dynamic mainland Joshua W. Lambert 2022-04-28 DAISIEmainland guide This guide is the long-form documentation of the DAISIEmainland R package. It covers the basics from installation (Section 1), to the algorithm used to simulate the data (Section 2), and the visualisation of the mainland (Section 3.1) and of the island (Section 3.2). Then there is a demonstration of the application of the DAISIEmainland package to the inference models in the DAISIE package (Section 4). Lastly, there is the visualisation of the summary metrics that can be calculated from simulated data (Section 5). Overview The DAISIEmainland package is used for simulating an island-mainland system. It primary purpose is the simulation of phylogenetic data sets of island species under a realistic model that incorporates evolutionary dynamics on the island and the mainland, from which the island species immigrate. This is in contrast to the inference and simulation models included in the DAISIE package (Etienne et al. 2022) which do not incorporate any changes in the mainland species through time. This novel model of mainland dynamics opens up the possibility of testing the robustness of the DAISIE likelihood models under various scenarios of mainland dynamics. We also include the incomplete sampling of mainland species, either by not sampling a known species or an undiscovered species which is present on the mainland but not known. These different sampling regimes are both possible in empirical studies and thus the sensitivity of model performance to these are important for future studies employing the DAISIE inference framework. There is an appendix (Section A) which contains details of the data structures used throughout the package, some of which are novel to this package and others are inherited from other packages (e.g. DAISIE). This appendix is meant for those looking to contribute and extend the DAISIEmainland package by explaining when certain data structures are used. If you are reading this guide to understand the general functionality of the package this section can be ignored. "],["installation.html", "1 Installation", " 1 Installation You can install the released version of DAISIEmainland from github with: # install.packages(&quot;remotes&quot;) # install remotes package if not installed remotes::install_github(&quot;joshwlambert/DAISIEmainland&quot;) The DAISIEmainland package has several dependencies (the entire list can be found in the DESCRIPTION file). Most of these are on CRAN and can be installed with install.packages(). However, the DAISIE (Etienne et al. 2022) and nLTT packages (Janzen and Bilderbeek 2021) require more up-to-date version than available on CRAN and need to be installed from github: remotes::install_github(&quot;rsetienne/DAISIE&quot;) remotes::install_github(&quot;thijsjanzen/nLTT&quot;) Load the DAISIEmainland package with the library() function. This will also load the package dependencies, specifically the DAISIE package which will be used later on for parameter estimation by fitting maximum likelihood models. library(DAISIEmainland) DAISIEmainland is currently not hosted on CRAN and thus cannot be installed using install.packages(). The package was developed using R version &gt;= 4. Therefore, it is recommended to use an R version at least as recent as R 4.0.0. The package is tested using continuous integration on the release version of R and the development version of R. Therefore, any issues with running DAISIEmainland functions on older versions of R will not be patched. "],["simulation-algorithm.html", "2 Simulation algorithm 2.1 Mainland simulation 2.2 Island simulation", " 2 Simulation algorithm The Doob-Gillespie algorithm is a stochastic exact solution that is used to simulate continuous-time processes, with several applications in biological modelling. The Doob-Gillespie algorithm can be used in evolutionary biology, for example to efficiently simulate a birth-death process. The island-mainland simulation in the DAISIEmainland package uses a two-part Doob-Gillespie simulation, one for the mainland (DAISIEmainland::sim_mainland) and one for the island (DAISIEmainland::sim_island). 2.1 Mainland simulation The mainland simulation uses a Doob-Gillespie algorithm to simulate the speciation and extinction of species under a Moran process, whereby every species extinction is immediately followed by a random species giving rise to two new species (speciation). This ensures a constant number of species on the mainland. Then the mainland phylogenetic data is fed into the island simulation (Section 2.2). Here the example shows mainland data being simulated for a time duration of one (million years), five initial mainland species, and a mainland extinction rate of one (per species per million years). set.seed( 1, kind = &quot;Mersenne-Twister&quot;, normal.kind = &quot;Inversion&quot;, sample.kind = &quot;Rejection&quot; ) mainland &lt;- DAISIEmainland:::sim_mainland( total_time = 1, m = 5, mainland_ex = 1 ) The output is a list of five mainland clades called multi_mainland_clade ( see Section A.2.4). mainland #&gt; [[1]] #&gt; spec_id main_anc_id spec_type branch_code branch_t spec_origin_t spec_ex_t #&gt; 1 1 1 E A NaN 0.0000000 0.7579891 #&gt; 2 10 1 E AA 0.7579891 0.7579891 0.9493026 #&gt; 3 11 1 C AB 0.7579891 0.7579891 1.0000000 #&gt; 4 12 1 C AAA 0.9493026 0.9493026 1.0000000 #&gt; 5 13 1 C AAB 0.9493026 0.9493026 1.0000000 #&gt; #&gt; [[2]] #&gt; spec_id main_anc_id spec_type branch_code branch_t spec_origin_t spec_ex_t #&gt; 1 2 2 E A NaN 0.0000000 0.1789954 #&gt; 2 8 2 C AA 0.1789954 0.1789954 1.0000000 #&gt; 3 9 2 E AB 0.1789954 0.1789954 0.7579891 #&gt; #&gt; [[3]] #&gt; spec_id main_anc_id spec_type branch_code branch_t spec_origin_t spec_ex_t #&gt; 1 3 3 E A NaN 0.0000000 0.1510364 #&gt; 2 6 3 E AA 0.1510364 0.1510364 0.9493026 #&gt; 3 7 3 C AB 0.1510364 0.1510364 1.0000000 #&gt; #&gt; [[4]] #&gt; spec_id main_anc_id spec_type branch_code branch_t spec_origin_t spec_ex_t #&gt; 1 4 4 E A NaN 0 0.1510364 #&gt; #&gt; [[5]] #&gt; spec_id main_anc_id spec_type branch_code branch_t spec_origin_t spec_ex_t #&gt; 1 5 5 E A NaN 0 0.1789954 Specifically focusing on one of these mainland clades (see Section A.2.5): mainland[[1]] #&gt; spec_id main_anc_id spec_type branch_code branch_t spec_origin_t spec_ex_t #&gt; 1 1 1 E A NaN 0.0000000 0.7579891 #&gt; 2 10 1 E AA 0.7579891 0.7579891 0.9493026 #&gt; 3 11 1 C AB 0.7579891 0.7579891 1.0000000 #&gt; 4 12 1 C AAA 0.9493026 0.9493026 1.0000000 #&gt; 5 13 1 C AAB 0.9493026 0.9493026 1.0000000 We can see that the information on this mainland clade include the ID of each species (spec_id). The ID of the mainland ancestor from which that species derived (main_anc_id). The type of species (spec_type) these can be I, C, or E for single lineage clade, cladogenetic species in a clade, or extinct species, respectively. All mainland species are initialised as spec_id = I but as the simulation progresses species become either part of a clade (C) or extinct (E). By keeping the extinct species we have a full history of the mainland and not the so-called reconstructed history which would only contain the living (extant) species. The branch_code provides the evolutionary relationships of the species in the clade and allows the topology of the clade to be constructed. The branch_t is the time when the species speciated from their common ancestor (in time after the start of the simulation and not time before present). The spec_origin_t is the time the species originated and is often equal to the branch_t. The spec_ex_t is the time the species went extinct (again in time after the start of the simulation). Species that do not go extinct are give a spec_ex_t equal to the total time of the simulation. Another example of what can happen on the mainland is the extinction of a singleton lineage before it underwent speciation. mainland[[4]] #&gt; spec_id main_anc_id spec_type branch_code branch_t spec_origin_t spec_ex_t #&gt; 1 4 4 E A NaN 0 0.1510364 2.2 Island simulation The island simulation runs after the mainland simulation and uses the mainland data to determine which species can immigrate to the island through time. The Doob-Gillespie algorithm is altered to accommodate the dynamic mainland pool. The time-steps are bounded to not jump over changes on the mainland to ensure the present state of the system (i.e. species on mainland) is always up-to-date. The algorithm checks whether any changes have occured on the mainland since the last time step and if so, the system is updated and the returned to the time at which the mainland last changed. This is valid owing to the Markov (memoryless) property of the Doob-Gillespie algorithm. set.seed( 1, kind = &quot;Mersenne-Twister&quot;, normal.kind = &quot;Inversion&quot;, sample.kind = &quot;Rejection&quot; ) island_tbl &lt;- DAISIEmainland:::sim_island( total_time = 1, island_pars = c(1, 1, 10, 1, 1), mainland_clade = mainland[[1]], mainland_sample_prob = 1, mainland_sample_type = &quot;complete&quot; ) island_tbl #&gt; spec_id main_anc_id col_t spec_type branch_code branch_t #&gt; 1 1 1 0.7551818 A &lt;NA&gt; NaN #&gt; 2 10 10 0.8507697 A &lt;NA&gt; NaN #&gt; ana_origin #&gt; 1 mainland_extinction #&gt; 2 mainland_extinction The island simulation outputs a island_tbl (see Section A.2.6). The island_tbl includes the species ID (spec_id), mainland ancestor ID (main_anc_id), species type (spec_type), branching code (branch_code), and branching time (branch_t). It also includes the time at which the species colonised the island (col_t) and the reason a species is anagenetic (i.e. endemic to the island without being in an island clade). The reasons for a species to be anagenetic are: the mainland population of the species goes extinct (mainland_extinction), the species undergoes anagenesis on the island (immig_parent), or the species formed a clade but all other members of the clade went extinct before the present (clade_extinct). One major difference between the island and mainland data that are produced by sim_mainland() and sim_island() is that the latter only has information from the reconstructed point of view. This means extinct species are removed from the data set and only species extant at the end of the simulation are included. For both the island and mainland Doob-Gillespie algorithms time steps are sampled from an exponential distribution with rate: \\[X = \\lambda e ^{-\\lambda x}, \\text{ where } \\lambda = \\sum_j r_j\\] where \\(r_j\\) are the rates. For the mainland process this is just the rate of mainland extinction (\\(\\mu_M\\)), as this is the only mainland parameter, whereas, for the island algorithm \\(r_j\\) are the rates of cladogenesis (\\(\\lambda^c\\)), island extinction (\\(\\mu\\)), colonisation (\\(\\gamma\\)), and anagenesis (\\(\\lambda^a\\)). After the time step (\\(\\Delta\\) t) is sampled, the event is sampled from a dynamic discrete probability distribution, weighted by its rate (propensity) relative to all other rates: \\[r_i / \\sum_j r_j\\] The system is then updated and the algorithm repeats until the time step exceeds the total time of the simulation. The function that encapsulates and runs both of these simulations is sim_island_with_mainland(). This function also includes the formatting of the data and the assignment of an endemicity status to each island colonist, which is needed by the DAISIE inference model. The DAISIEmainland simulation outputs two data sets: (1) contains full information of all species colonisation times, and (2) an incomplete information data set which resembles what an empiricist would have access to (see Section A.2.1). These two data sets allow for the quantification of error in estimation when the empiricist does not have access to all the data. set.seed( 1, kind = &quot;Mersenne-Twister&quot;, normal.kind = &quot;Inversion&quot;, sample.kind = &quot;Rejection&quot; ) daisie_mainland_data &lt;- sim_island_with_mainland( total_time = 1, m = 5, island_pars = c(1, 1, 10, 1, 1), mainland_ex = 1, mainland_sample_prob = 1, mainland_sample_type = &quot;unsampled&quot;, replicates = 1 ) daisie_mainland_data #&gt; $ideal_multi_daisie_data #&gt; $ideal_multi_daisie_data[[1]] #&gt; $ideal_multi_daisie_data[[1]][[1]] #&gt; $ideal_multi_daisie_data[[1]][[1]]$island_age #&gt; [1] 1 #&gt; #&gt; $ideal_multi_daisie_data[[1]][[1]]$not_present #&gt; [1] 3 #&gt; #&gt; #&gt; $ideal_multi_daisie_data[[1]][[2]] #&gt; $ideal_multi_daisie_data[[1]][[2]]$branching_times #&gt; [1] 1.0000000 0.1026008 #&gt; #&gt; $ideal_multi_daisie_data[[1]][[2]]$stac #&gt; [1] 2 #&gt; #&gt; $ideal_multi_daisie_data[[1]][[2]]$missing_species #&gt; [1] 0 #&gt; #&gt; #&gt; $ideal_multi_daisie_data[[1]][[3]] #&gt; $ideal_multi_daisie_data[[1]][[3]]$branching_times #&gt; [1] 1.0000000 0.9627315 #&gt; #&gt; $ideal_multi_daisie_data[[1]][[3]]$stac #&gt; [1] 2 #&gt; #&gt; $ideal_multi_daisie_data[[1]][[3]]$missing_species #&gt; [1] 0 #&gt; #&gt; #&gt; #&gt; #&gt; $empirical_multi_daisie_data #&gt; $empirical_multi_daisie_data[[1]] #&gt; $empirical_multi_daisie_data[[1]][[1]] #&gt; $empirical_multi_daisie_data[[1]][[1]]$island_age #&gt; [1] 1 #&gt; #&gt; $empirical_multi_daisie_data[[1]][[1]]$not_present #&gt; [1] 3 #&gt; #&gt; #&gt; $empirical_multi_daisie_data[[1]][[2]] #&gt; $empirical_multi_daisie_data[[1]][[2]]$branching_times #&gt; [1] 1.0000000 0.8489636 #&gt; #&gt; $empirical_multi_daisie_data[[1]][[2]]$stac #&gt; [1] 2 #&gt; #&gt; $empirical_multi_daisie_data[[1]][[2]]$missing_species #&gt; [1] 0 #&gt; #&gt; #&gt; $empirical_multi_daisie_data[[1]][[3]] #&gt; $empirical_multi_daisie_data[[1]][[3]]$branching_times #&gt; [1] 1.00000 0.99999 #&gt; #&gt; $empirical_multi_daisie_data[[1]][[3]]$stac #&gt; [1] 5 #&gt; #&gt; $empirical_multi_daisie_data[[1]][[3]]$missing_species #&gt; [1] 0 "],["simulation-data-visualisation.html", "3 Simulation data visualisation 3.1 Visualise mainland 3.2 Visualise island", " 3 Simulation data visualisation The previous section (Section 2) showed how the data is simulated. Another important aspect visualising the data and DAISIEmainland has a selection of plotting functions to plot the phylogenetic data of the mainland and the island. 3.1 Visualise mainland We simulate the same mainland system as (Section 2.1) and then plot the all the mainland clades using plot_mainland. set.seed( 1, kind = &quot;Mersenne-Twister&quot;, normal.kind = &quot;Inversion&quot;, sample.kind = &quot;Rejection&quot; ) mainland &lt;- DAISIEmainland:::sim_mainland( total_time = 1, m = 5, mainland_ex = 1 ) DAISIEmainland::plot_mainland(mainland) The above plot shows the evolutionary history of each mainland species from the start of the simulation, as five independent (i.e. no phylogenetic relatedness) mainland species, to five extant species at the present. Each species is given as unique species ID which are shown here as different coloured branches. The colours can also be changed to represent the clade a species belongs to. DAISIEmainland::plot_mainland(mainland, branch_colour = &quot;clade_id&quot;) If there are many clades on the mainland it can be difficult to see when plotted as an entire community. Instead individual mainland clades can be selected from the data and plotted with plot_mainland_clade. Again the option of plotting the unique species ID or clade ID are available. DAISIEmainland::plot_mainland_clade( mainland_clade = mainland[[1]], branch_colour = &quot;unique_species_id&quot; ) DAISIEmainland::plot_mainland_clade( mainland_clade = mainland[[1]], branch_colour = &quot;clade_id&quot; ) 3.2 Visualise island The same set of plotting functionality exists for the island data. Here we simulate a range of possible outcomes for the island data and show how each looks using the function plot_daisie_data. An empty island An island with a single non-endemic species An island with a single endemic species An island with a single non-endemic species which whose colonisation time is older than the island age so it is considered an island-age colonisation (i.e. it colonised at the island age because it could not have colonised before). This uncertainty in the timing of colonisation is then taken into account when the data is input into the DAISIE likelihood model. An island with a single endemic species which whose colonisation time is older than the island age so it is considered an island-age colonisation. The uncertainty in colonisation time is handled in an equivalent way to the non-endemic island-age colonisation. An island with an endemic clade whose colonisation time is older than the island age so it is considered an island-age colonisation. In DAISIE the colonisation time is assumed to have occurred between the island age and the first branching time in the clade. An island with an recolonisation of the same mainland species after it has colonised and speciated (either via cladogenesis or anagenesis on the island). The colonists that are from the same ancestral mainland species but the island species is now endemic are show by Colonist after anagenesis and Colonist after cladogenesis. All the above scenarios are of one of the daisie_data sets that are produced from the sim_island_with_mainland() function which produces the ideal_data and empirical_data. plot_daisie_mainland_data plots these two island data sets together. #&gt; $ideal_multi_daisie_data #&gt; $ideal_multi_daisie_data[[1]] #&gt; $ideal_multi_daisie_data[[1]][[1]] #&gt; $ideal_multi_daisie_data[[1]][[1]]$island_age #&gt; [1] 1 #&gt; #&gt; $ideal_multi_daisie_data[[1]][[1]]$not_present #&gt; [1] 3 #&gt; #&gt; #&gt; $ideal_multi_daisie_data[[1]][[2]] #&gt; $ideal_multi_daisie_data[[1]][[2]]$branching_times #&gt; [1] 1.0000000 0.1026008 #&gt; #&gt; $ideal_multi_daisie_data[[1]][[2]]$stac #&gt; [1] 2 #&gt; #&gt; $ideal_multi_daisie_data[[1]][[2]]$missing_species #&gt; [1] 0 #&gt; #&gt; #&gt; $ideal_multi_daisie_data[[1]][[3]] #&gt; $ideal_multi_daisie_data[[1]][[3]]$branching_times #&gt; [1] 1.0000000 0.9627315 #&gt; #&gt; $ideal_multi_daisie_data[[1]][[3]]$stac #&gt; [1] 2 #&gt; #&gt; $ideal_multi_daisie_data[[1]][[3]]$missing_species #&gt; [1] 0 #&gt; #&gt; #&gt; #&gt; #&gt; $empirical_multi_daisie_data #&gt; $empirical_multi_daisie_data[[1]] #&gt; $empirical_multi_daisie_data[[1]][[1]] #&gt; $empirical_multi_daisie_data[[1]][[1]]$island_age #&gt; [1] 1 #&gt; #&gt; $empirical_multi_daisie_data[[1]][[1]]$not_present #&gt; [1] 3 #&gt; #&gt; #&gt; $empirical_multi_daisie_data[[1]][[2]] #&gt; $empirical_multi_daisie_data[[1]][[2]]$branching_times #&gt; [1] 1.0000000 0.8489636 #&gt; #&gt; $empirical_multi_daisie_data[[1]][[2]]$stac #&gt; [1] 2 #&gt; #&gt; $empirical_multi_daisie_data[[1]][[2]]$missing_species #&gt; [1] 0 #&gt; #&gt; #&gt; $empirical_multi_daisie_data[[1]][[3]] #&gt; $empirical_multi_daisie_data[[1]][[3]]$branching_times #&gt; [1] 1.00000 0.99999 #&gt; #&gt; $empirical_multi_daisie_data[[1]][[3]]$stac #&gt; [1] 5 #&gt; #&gt; $empirical_multi_daisie_data[[1]][[3]]$missing_species #&gt; [1] 0 In the plot juxtaposing the ideal_data (top) and the empirical_data (bottom) it is clear that the colonisation times differ for one of the island colonists. In the empirical_data this colonist is an island-age colonist which is likely due to the effects of mainland dynamics shifting the empiricists perception of the colonisation time. "],["inference-performance.html", "4 Inference performance 4.1 Simulating data 4.2 Maximum likelihood inference 4.3 Inference performance error metrics", " 4 Inference performance pre { max-height: 1000px; overflow-y: auto; } pre[class] { max-height: 500px; } .scroll-100 { max-height: 100px; overflow-y: auto; background-color: inherit; } One of the primary purposes of the DAISIEmainland package and specifically why the data is formatted in the DAISIE format is to test the maximum likelihood inference models implemented in the DAISIE R package (Etienne et al. 2022). Therefore, in this section we explore how to conduct a simple performance analysis of one of the DAISIE models. In this case we are going to use the model with a single macroevolutionary regime on the island ( i.e. all island species are assumed to have the same rate of colonisation, speciation and extinction, as well as the same carrying capacity). This model also assumes that the carrying capacity only operates between species within the same island clade (termed clade-specific diversity-dependence), thus different island colonists are supposed independent and not inhibiting the diversification of each other. As a small technical aside, this section uses DAISIE version 4.1.1. Re-running this code on another system may produce different results, especially if a different version of DAISIE is installed. 4.1 Simulating data First, we simulate 100 replicates of island data. This will produce phylogenetic data for a 100 islands with the same parameter values. The reason multiple island data sets are simulated is because the simualation algorithm is stochastic (Section 2) and by iterating the simulation many times it accounts for differences between data sets due to stochasticity. In an analysis more replicates (e.g. 1,000) can be run to account for the stochastic differences between replicates to more thoroughly sample the distribution of possible simulation outcomes. Note: all the code below takes a substantial amount of time to run (on the order of hours for 100 replicates). set.seed( 1, kind = &quot;Mersenne-Twister&quot;, normal.kind = &quot;Inversion&quot;, sample.kind = &quot;Rejection&quot;) replicates &lt;- 100 daisie_mainland_data &lt;- DAISIEmainland::sim_island_with_mainland( total_time = 1, m = 100, island_pars = c(0.5, 02.5, 50, 0.01, 0.5), mainland_ex = 1.0, mainland_sample_prob = 1, mainland_sample_type = &quot;complete&quot;, replicates = replicates, verbose = FALSE ) Now we have the simulated data, stored in daisie_mainland_data (see section A.2.1), which is a list object. At the highest level of the list there are two lists: daisie_mainland_data$ideal_multi_daisie_data and daisie_mainland_data$empirical_multi_daisie_data. Each of these multi_daisie_data lists contains 100 elements, one for each simulation replicate. The daisie_mainland_data$ideal_multi_daisie_data and daisie_mainland_data$empirical_multi_daisie_data have the same structure. The first element of each is the meta data, containing: island_age and the number of species not_present on the island that are on the mainland. daisie_mainland_data$ideal_multi_daisie_data[[1]][[1]] #&gt; $island_age #&gt; [1] 5 #&gt; #&gt; $not_present #&gt; [1] 959 daisie_mainland_data$empirical_multi_daisie_data[[1]][[1]] #&gt; $island_age #&gt; [1] 5 #&gt; #&gt; $not_present #&gt; [1] 959 Subsequent elements of the list are the island clades which are composed of: branching_times, status of colonisation or stac, and number of missing_species. The branching_times contains the age of the island, the time of colonisation and any subsequent cladogenetic speciation times. The stac is a numeric identifier of the endemicicity status and cladogenetic status (i.e. is the island colonist a singleton lineage or a clade). Lastly, the missing_species is the number of species known from an island clade but not included in the branching_times vector as there is no phylogenetic information on the timing of speciation for that species. In the DAISIEmainland simulation we assume that we have phylogenetic information on all species on the island and thus missing_species is always set to zero. daisie_mainland_data$ideal_multi_daisie_data[[1]][[2]] #&gt; $branching_times #&gt; [1] 5.0000000 4.1284128 0.1607578 #&gt; #&gt; $stac #&gt; [1] 2 #&gt; #&gt; $missing_species #&gt; [1] 0 daisie_mainland_data$empirical_multi_daisie_data[[1]][[2]] #&gt; $branching_times #&gt; [1] 5.0000000 4.1284128 0.1607578 #&gt; #&gt; $stac #&gt; [1] 2 #&gt; #&gt; $missing_species #&gt; [1] 0 4.2 Maximum likelihood inference To run a maximum likelihood DAISIE model, using the DAISIE_ML_CS() function, on each replicate we create objects to store the data in (ideal_ml and empirical_ml) and then loop over each replicate. ideal_ml &lt;- vector(&quot;list&quot;, replicates) empirical_ml &lt;- vector(&quot;list&quot;, replicates) for (i in seq_len(replicates)) { ideal_ml[[i]] &lt;- DAISIE::DAISIE_ML_CS( datalist = daisie_mainland_data$ideal_multi_daisie_data[[i]], initparsopt = c(0.5, 02.5, 50, 0.01, 0.5), idparsopt = 1:5, parsfix = NULL, idparsfix = NULL, ddmodel = 11, methode = &quot;odeint::runge_kutta_fehlberg78&quot;, optimmethod = &quot;simplex&quot;, jitter = 1e-5) empirical_ml[[i]] &lt;- DAISIE::DAISIE_ML_CS( datalist = daisie_mainland_data$empirical_multi_daisie_data[[i]], initparsopt = c(0.5, 02.5, 50, 0.01, 0.5), idparsopt = 1:5, parsfix = NULL, idparsfix = NULL, ddmodel = 11, methode = &quot;odeint::runge_kutta_fehlberg78&quot;, optimmethod = &quot;simplex&quot;, jitter = 1e-5) } The details of the maximum likelihood set up are not important, but a brief explainer: all model parameters are optimisied with the starting position in parameter space for optimisation, equal to the values used to simulate the data; the Runge-Kutta Fehlberg method is used to numerically solve the likelihood equations; and simplex is the optimisation algorithm to maximise the likelihood. 4.3 Inference performance error metrics Now we have simulated 100 data sets, each with an ideal and empirical data set, and fitted the DAISIE model to each, we need to quantify the error the DAISIE inference makes because it does not include mainland evolutionary dynamics. The error metrics chosen to quantify this are: The difference between the parameter estimates from ideal and empirical data, for cladogenesis ($clado_ratio), extinction ($ext_ratio), carrying capacity ($k_ratio), colonisation ($immig_ratio), and anagenesis ($ana_ratio). This can be calculated as the ideal estimate minus empirical estimate, or ideal estimate divided by the empirical estimate. error_metrics$param_diffs #&gt; $clado_diffs #&gt; [1] 0.0485671213 0.1373335180 0.1235759403 0.0953859594 0.1358954310 #&gt; [6] 0.0866802387 0.1325293598 0.0040849011 0.1258097861 0.1183624223 #&gt; [11] 0.0209520854 0.0067349700 0.1405136758 0.0159262995 0.0332742438 #&gt; [16] 0.0652122543 0.0757534327 0.0703789053 0.0638534672 0.1123253518 #&gt; [21] 0.0387860642 0.1389811329 0.0489951561 0.0057499664 0.0982333242 #&gt; [26] 0.0222870658 0.0925295642 0.0670060346 0.0241730403 0.0736598720 #&gt; [31] 0.0939902206 0.0832876704 0.0952014091 0.1183953843 0.0333036319 #&gt; [36] 0.0788275212 0.0652345805 0.1196498887 0.0075744193 0.0007002778 #&gt; [41] 0.0565057260 0.1559784446 0.1600979463 0.0598963000 0.0778151524 #&gt; [46] 0.0027668697 0.0596032902 0.1066499937 -0.0052408873 0.0855404107 #&gt; [51] 0.1873826787 0.1366268656 0.0247300013 0.1278115324 0.1110532752 #&gt; [56] 0.1702827555 0.0580207482 -0.0269455300 0.1388745854 0.1932200372 #&gt; [61] -0.0484186886 0.1117052217 0.1250062565 0.0992634319 0.0287133793 #&gt; [66] 0.0731280890 0.1348903390 0.0948763814 0.0660694034 0.1196880994 #&gt; [71] 0.2336268190 0.1672059897 0.1535245336 0.0468435173 0.1429627692 #&gt; [76] 0.2474280851 0.0520964225 0.0617982639 0.1516189004 0.0141226232 #&gt; [81] 0.0010783260 0.0519716199 0.0967431949 0.0659618055 0.0903201873 #&gt; [86] 0.0977781642 0.0218629018 -0.0450911852 0.0818354966 0.1339237117 #&gt; [91] 0.2632617046 0.0381733346 0.0814707184 0.0771590033 0.0110410705 #&gt; [96] 0.1906785193 0.0557903264 0.0962286193 -0.0255369899 -0.0308531267 #&gt; #&gt; $ext_diffs #&gt; [1] 6.857364e-02 1.097038e-01 1.125931e-01 4.725620e-02 5.632513e-02 #&gt; [6] 1.481105e-01 2.000310e-01 6.071199e-02 1.096539e-01 1.181260e-01 #&gt; [11] 2.499557e-02 5.500459e-05 7.427308e-02 1.437063e-02 8.446332e-02 #&gt; [16] 9.517239e-02 1.764619e-01 1.127467e-01 6.058841e-02 8.199032e-02 #&gt; [21] 4.615333e-02 1.056925e-01 1.125869e-01 -1.008727e-02 9.737776e-02 #&gt; [26] -2.615180e-04 1.743287e-01 5.330404e-02 4.899761e-02 9.500368e-02 #&gt; [31] 8.581763e-02 1.516548e-01 1.404316e-01 1.459737e-01 7.720799e-02 #&gt; [36] 1.257149e-01 9.721214e-02 7.475331e-02 1.620405e-02 2.231194e-04 #&gt; [41] 7.279873e-02 2.125234e-01 8.736661e-02 -5.667143e-06 4.749765e-02 #&gt; [46] -1.409081e-06 5.133049e-02 3.874742e-02 -1.146016e-02 1.087732e-01 #&gt; [51] 1.769580e-01 8.652160e-02 4.636389e-02 1.202245e-01 1.293976e-01 #&gt; [56] 1.215278e-01 1.481257e-01 7.206466e-02 1.060878e-01 2.002648e-01 #&gt; [61] -6.393059e-03 1.226918e-01 1.788540e-01 1.217913e-01 7.357735e-02 #&gt; [66] 2.976577e-02 9.688404e-02 1.605063e-01 7.182201e-02 1.564635e-01 #&gt; [71] 4.096875e-01 1.796573e-01 1.716357e-01 2.250669e-02 1.071613e-01 #&gt; [76] 2.330795e-01 9.216332e-02 1.279147e-01 2.238795e-01 6.356713e-02 #&gt; [81] -1.060943e-03 8.552440e-02 8.791171e-02 9.672859e-02 6.732924e-02 #&gt; [86] 1.122435e-01 3.596650e-02 -3.778419e-02 9.899419e-02 1.151449e-01 #&gt; [91] 2.101046e-01 7.911586e-02 8.636993e-02 8.483219e-02 1.101010e-02 #&gt; [96] 1.686426e-01 4.570608e-02 8.918716e-02 -2.143301e-14 1.022372e-02 #&gt; #&gt; $k_diffs #&gt; [1] -3.496213e-01 -1.760964e+00 -1.980145e-01 -4.525308e+00 -9.302610e+00 #&gt; [6] 2.516986e-01 -Inf 1.100309e+00 -1.233321e-01 -1.451193e+00 #&gt; [11] -1.599502e+00 -4.807013e-02 -9.729760e-01 -1.184472e-02 6.068851e-01 #&gt; [16] 2.209808e-01 NaN 6.177416e-01 -1.283903e+00 -4.505470e-01 #&gt; [21] 4.851449e-01 2.297718e-12 NaN -3.803513e-01 -1.129781e+00 #&gt; [26] -8.420514e-01 NaN -1.381843e-01 2.834243e-01 -1.263562e+01 #&gt; [31] -1.635090e+00 NaN 2.079064e+00 5.580890e-01 NaN #&gt; [36] -1.341703e+00 -4.896262e+00 -1.127207e+00 7.736603e-01 -1.732510e-01 #&gt; [41] -3.770729e+00 -8.429657e+01 -2.515503e-01 -4.328450e+00 -2.366657e+00 #&gt; [46] NaN -6.352045e+00 -3.229599e-01 NaN 8.838242e-01 #&gt; [51] -7.992154e+01 -1.273254e+00 NaN -4.879011e+00 -7.461650e+00 #&gt; [56] -1.068268e+01 NaN 1.432933e+00 -1.462462e+00 -2.422899e+01 #&gt; [61] 1.705262e+01 -Inf -4.951696e-01 -1.550811e+01 8.432118e-01 #&gt; [66] -1.233582e-08 -8.160294e-01 6.544387e-01 -1.057907e+00 -1.546564e+00 #&gt; [71] -5.643018e+00 3.700340e-02 -7.188337e+00 -2.843850e+00 -2.659184e-01 #&gt; [76] -1.508660e+00 1.412603e+00 NaN -Inf 4.060781e-01 #&gt; [81] -1.932961e-01 7.244419e-02 -1.481494e-01 NaN 7.736034e-11 #&gt; [86] -2.658060e+00 4.513234e-02 2.207231e+00 -Inf -9.670351e+01 #&gt; [91] -6.814340e+00 -2.393552e+00 -7.651993e-01 -7.558605e-01 2.966476e-02 #&gt; [96] -9.004889e+00 -2.705575e+00 -7.597101e+00 5.761140e+01 1.930309e+00 #&gt; #&gt; $immig_diffs #&gt; [1] 1.042022e-03 9.743975e-04 1.516408e-03 3.551594e-04 8.390961e-04 #&gt; [6] 2.057175e-03 2.227582e-03 1.452176e-03 1.008419e-03 1.327859e-03 #&gt; [11] 3.412082e-04 -1.278710e-05 8.116564e-04 4.464987e-04 7.378906e-04 #&gt; [16] 1.358666e-03 3.348057e-03 1.454142e-03 1.077728e-03 6.188365e-04 #&gt; [21] 7.090332e-04 9.048389e-04 1.994647e-03 -7.993683e-05 1.063019e-03 #&gt; [26] 1.821143e-05 1.938671e-03 4.111066e-04 5.295924e-04 9.949653e-04 #&gt; [31] 6.655333e-04 2.129320e-03 2.071309e-03 1.653417e-03 1.351098e-03 #&gt; [36] 1.418462e-03 1.804811e-03 5.124829e-04 2.020163e-04 2.116319e-04 #&gt; [41] 1.416318e-03 2.782163e-03 7.752967e-04 2.087575e-04 2.787000e-04 #&gt; [46] 1.919504e-04 6.559712e-04 1.238442e-04 3.287926e-04 2.182717e-03 #&gt; [51] 1.405726e-03 9.459177e-04 1.059625e-03 1.269979e-03 2.098623e-03 #&gt; [56] 1.232630e-03 1.161765e-03 1.645384e-03 1.440077e-03 1.610687e-03 #&gt; [61] 3.843102e-04 1.502280e-03 2.127733e-03 1.308060e-03 8.659956e-04 #&gt; [66] 1.140500e-04 6.868319e-04 3.183439e-03 9.367026e-04 3.353336e-03 #&gt; [71] 4.175519e-03 1.126795e-03 2.030753e-03 2.275020e-04 1.187243e-03 #&gt; [76] 2.105562e-03 1.559709e-03 1.728874e-03 3.312228e-03 5.882417e-04 #&gt; [81] 2.399429e-04 1.018908e-03 1.061724e-03 1.101474e-03 7.102028e-04 #&gt; [86] 1.449428e-03 3.926257e-04 -4.089808e-04 1.280796e-03 1.236879e-03 #&gt; [91] 2.200531e-03 8.608049e-04 6.789350e-04 9.925445e-04 1.585696e-04 #&gt; [96] 2.272000e-03 4.468965e-04 7.226488e-04 1.442125e-04 5.610867e-04 #&gt; #&gt; $ana_diffs #&gt; [1] -2.81502418 -0.30755024 -8.83992684 -0.09823236 -6.37998771 #&gt; [6] -2.00149632 -0.52255434 -0.18900595 -1.44201732 -1.36502610 #&gt; [11] -1.11886027 -0.40458206 -0.35338120 -1.71542320 -1.70200338 #&gt; [16] -2.03288606 -4.98153156 -0.92630285 -1.49863569 -3.16133662 #&gt; [21] -0.22306379 1.16501822 -0.45087136 -99.23345781 -0.42568490 #&gt; [26] -1.47454122 -1.82309850 -0.77802340 -2.74982881 -99.19490151 #&gt; [31] -0.43635432 -1.35225428 -0.21317802 -1.95643284 -0.60724162 #&gt; [36] -3.01877683 -0.47780628 -1.26597480 -5.01345786 -0.86483660 #&gt; [41] -1.86608664 -3.62904156 -0.75516449 -96.88273322 -2.68596835 #&gt; [46] -0.17875030 -1.17023276 -0.55650869 -2.61311465 -1.19975469 #&gt; [51] 0.51695521 -0.89282807 -7.03008622 -0.69367270 -0.89192587 #&gt; [56] -3.80878377 -2.15111646 -1.22599348 -2.70004090 -0.71966370 #&gt; [61] -98.06618339 -0.70533170 -3.46826307 -1.27895765 -0.76310280 #&gt; [66] -3.41426901 -0.12162699 -1.54694995 -1.27817247 -0.53709200 #&gt; [71] -2.17232671 -1.29543112 -98.25615324 0.00000000 -1.19148035 #&gt; [76] -7.23074816 -0.91334813 -3.80968955 -0.79059622 -2.96121375 #&gt; [81] -1.56570253 -0.83990984 -0.21666682 -0.79426705 -0.35740054 #&gt; [86] -1.04115133 -0.42769514 -8.44618955 -2.13413452 -1.56313291 #&gt; [91] -3.61881486 -1.55017243 -0.15521925 -0.73067508 -0.86176702 #&gt; [96] -2.91392867 -2.24233168 -3.03266562 -98.50940645 -0.69419471 error_metrics$param_ratios #&gt; $clado_ratio #&gt; [1] 1.1019247 1.2645962 1.2315766 1.2231733 1.2038794 1.0732537 1.3283457 #&gt; [8] 1.0063321 1.1697543 1.1794265 1.0285701 1.0138593 1.2180917 1.0233796 #&gt; [15] 1.0619812 1.0821268 1.1856363 1.1443566 1.1089589 1.2182676 1.0394481 #&gt; [22] 1.2455419 1.1203024 1.0098534 1.1873124 1.0489651 1.2447870 1.0815000 #&gt; [29] 1.0697073 1.1462584 1.1552739 1.1476469 1.1287327 1.2280786 1.1002011 #&gt; [36] 1.1743800 1.1101595 1.1488195 1.0114636 1.0012274 1.1347616 1.3979466 #&gt; [43] 1.2114707 1.1029518 1.1204869 1.0084438 1.1184261 1.1015717 0.9840621 #&gt; [50] 1.1006664 1.3545575 1.1875476 1.0504432 1.2547194 1.1935862 1.4246978 #&gt; [57] 1.1300556 0.9609090 1.2241886 1.4629485 0.9149940 1.2652098 1.2217370 #&gt; [64] 1.2170709 1.0486845 1.0753999 1.2160452 1.1810725 1.0999879 1.2034898 #&gt; [71] 1.5353281 1.2518833 1.2277219 1.1006048 1.1769789 1.4717583 1.0787394 #&gt; [78] 1.1547868 1.3423970 1.0253501 1.0020710 1.0908377 1.1745615 1.1009075 #&gt; [85] 1.0931471 1.2598514 1.0391368 0.9447405 1.1730173 1.2679206 1.4787505 #&gt; [92] 1.1022435 1.0988597 1.1309307 1.0173436 1.6469116 1.1401073 1.2004272 #&gt; [99] 0.9430654 0.9487790 #&gt; #&gt; $ext_ratio #&gt; [1] 4.368896e+10 2.247107e+00 2.307965e+00 1.559733e+00 1.107176e+00 #&gt; [6] 1.276581e+00 1.014503e+01 1.190183e+00 1.236633e+00 1.708440e+00 #&gt; [11] 1.049173e+00 9.870138e+09 1.286894e+00 1.056265e+00 2.337184e+00 #&gt; [16] 1.288329e+00 2.402821e+00 2.431660e+11 1.556109e+00 2.922531e+00 #&gt; [21] 1.093333e+00 1.703661e+00 2.258062e+00 9.372024e-01 2.317361e+00 #&gt; [26] 1.108920e-09 5.176414e+00 1.208487e+00 1.775872e+11 1.333426e+00 #&gt; [31] 1.929799e+00 1.384392e+00 1.273000e+00 8.429728e+11 3.511354e+01 #&gt; [36] 6.917127e+12 1.362813e+00 1.197913e+00 1.040595e+00 2.780516e+09 #&gt; [41] 2.278822e+00 4.860388e+00 1.314793e+00 1.507218e-07 1.123221e+00 #&gt; [46] 1.732810e-04 5.036783e+00 1.086917e+00 3.591096e-09 1.240306e+00 #&gt; [51] 2.170009e+00 1.414762e+00 1.172721e+00 1.534977e+00 1.506628e+00 #&gt; [56] 1.702878e+12 2.200715e+06 1.273985e+00 1.397770e+00 3.674563e+11 #&gt; [61] 9.818634e-01 2.482082e+00 2.475970e+00 1.476402e+00 1.853170e+00 #&gt; [66] 1.051781e+00 1.447594e+00 2.914421e+00 1.210774e+00 1.676642e+00 #&gt; [71] 1.115805e+12 2.550256e+00 2.148906e+00 2.686589e+11 1.223887e+00 #&gt; [76] 8.296050e+00 1.230673e+00 1.546809e+00 2.641143e+00 6.002974e+00 #&gt; [81] 9.922770e-01 1.407970e+00 1.469073e+00 1.183168e+00 1.098108e+00 #&gt; [86] 5.625863e+11 1.495995e+00 9.310646e-01 1.401439e+00 1.627062e+00 #&gt; [91] 1.861633e+00 3.318195e+00 1.155149e+00 1.599951e+00 1.029143e+00 #&gt; [96] 5.342523e+02 1.289240e+00 9.089077e+10 8.081950e-01 1.031266e+00 #&gt; #&gt; $k_ratio #&gt; [1] 0.9759979 0.8851219 0.9728497 0.7712869 0.5355142 1.0226588 0.0000000 #&gt; [8] 1.0990068 0.9865571 0.9109885 0.9512656 0.9935885 0.9054963 0.9988169 #&gt; [15] 1.0279555 1.0129938 NaN 1.0350560 0.9485566 0.9528544 1.0554575 #&gt; [22] 1.0000000 NaN 0.9764286 0.9188533 0.9353091 NaN 0.9892863 #&gt; [29] 1.0062481 0.7622975 0.9332112 NaN 1.0863003 1.0569779 NaN #&gt; [36] 0.9592238 0.7443303 0.9275784 1.0044091 0.9850291 0.8670505 0.2003501 #&gt; [43] 0.9624100 0.7570835 0.8976065 NaN 0.7193965 0.9673533 NaN #&gt; [50] 1.0477054 0.2590141 0.9277677 NaN 0.7516033 0.8196856 0.4771808 #&gt; [57] NaN 1.1933501 0.8689615 0.4057954 1.6938724 0.0000000 0.9740698 #&gt; [64] 0.7017777 1.0594442 1.0000000 0.9296927 1.0381618 0.9322491 0.8580620 #&gt; [71] 0.8047749 1.0057703 0.8028354 0.8646753 0.9716147 0.8642064 1.1147170 #&gt; [78] NaN 0.0000000 1.0423507 0.9884308 1.0049769 0.9792744 NaN #&gt; [85] 1.0000000 0.8869874 1.0031085 1.1403730 0.0000000 0.2914180 0.6367512 #&gt; [92] 0.9233759 0.9688190 0.9604435 1.0037081 0.4508025 0.8505793 0.8283872 #&gt; [99] 2.7275012 1.1199524 #&gt; #&gt; $immig_ratio #&gt; [1] 1.1208684 1.1310031 1.1766406 1.0559947 1.0772917 1.2234355 1.3374036 #&gt; [8] 1.1459946 1.1009760 1.1295151 1.0260638 0.9980173 1.0632580 1.0440015 #&gt; [15] 1.1134424 1.1277152 1.3252620 1.1856656 1.1237274 1.1039668 1.0770954 #&gt; [22] 1.1308119 1.2249763 0.9904184 1.1232711 1.0020259 1.2684106 1.0485719 #&gt; [29] 1.0801134 1.1164359 1.0957965 1.1775955 1.1756976 1.2752436 1.1865987 #&gt; [36] 1.2149293 1.1875892 1.0541904 1.0216487 1.0263911 1.1585339 1.4006457 #&gt; [43] 1.0764068 1.0316560 1.0359661 1.0329992 1.1005446 1.0141781 1.0407157 #&gt; [50] 1.1957650 1.2522359 1.1036875 1.0876331 1.1412202 1.1719301 1.1762298 #&gt; [57] 1.2147905 1.1678468 1.1418940 1.2869597 1.0431875 1.1668380 1.2605257 #&gt; [64] 1.1514541 1.1293670 1.0095504 1.0965260 1.3232910 1.0768819 1.2804492 #&gt; [71] 1.7252252 1.2209662 1.2143799 1.0299591 1.0903716 1.4030301 1.1376007 #&gt; [78] 1.2261965 1.3912836 1.0873358 1.0255434 1.1489269 1.1073064 1.0960557 #&gt; [85] 1.0466218 1.1948394 1.0457636 0.9706315 1.1571197 1.1306892 1.2649934 #&gt; [92] 1.1235443 1.0727404 1.0992527 1.0136102 1.3161109 1.0606378 1.1164211 #&gt; [99] 1.0240545 1.0525936 #&gt; #&gt; $ana_ratio #&gt; [1] 3.829679e-01 6.522835e-01 1.790843e-01 9.374789e-01 1.190392e-01 #&gt; [6] 1.762753e-12 6.893415e-01 9.064945e-01 5.902257e-01 4.327097e-01 #&gt; [11] 4.262540e-01 8.078228e-01 8.935561e-01 2.963010e-01 3.135234e-01 #&gt; [16] 5.913718e-01 2.275231e-01 5.626318e-01 4.892840e-01 3.868135e-01 #&gt; [21] 8.233284e-01 1.092117e+00 7.145972e-01 7.665422e-03 6.638959e-01 #&gt; [26] 4.290807e-01 3.756175e-01 3.982345e-01 2.519282e-01 8.050985e-03 #&gt; [31] 4.186570e-01 6.632527e-01 8.996221e-01 6.134037e-01 6.326801e-01 #&gt; [36] 2.487922e-01 7.171181e-01 7.698045e-01 1.092587e-01 6.496507e-01 #&gt; [41] 2.398907e-01 2.561441e-01 7.063178e-01 3.117267e-02 2.706573e-01 #&gt; [46] 8.655616e-01 4.837991e-01 8.691849e-01 3.598866e-01 5.850882e-01 #&gt; [51] 1.212092e+00 5.966360e-01 1.227338e-01 5.924129e-01 3.800267e-01 #&gt; [56] 3.010002e-01 2.570959e-01 4.042118e-01 2.361965e-01 5.289609e-01 #&gt; [61] 1.933817e-02 5.594226e-01 3.991974e-01 2.454061e-01 7.476550e-01 #&gt; [66] 2.341141e-01 9.144005e-01 6.326505e-01 6.258742e-01 6.829908e-01 #&gt; [71] 5.093517e-01 6.669009e-01 1.743847e-02 1.000000e+00 2.761089e-01 #&gt; [76] 2.276879e-01 5.536222e-01 2.310265e-01 5.404810e-01 2.352762e-01 #&gt; [81] 3.998440e-01 7.150560e-01 8.971522e-01 6.044293e-01 7.463653e-01 #&gt; [86] 5.568244e-01 8.181816e-01 9.041582e-02 5.485972e-01 3.040310e-01 #&gt; [91] 1.567141e-01 4.059717e-01 7.918612e-01 5.667673e-01 3.742646e-01 #&gt; [96] 5.592775e-01 2.653516e-01 2.743024e-01 1.490594e-02 8.185683e-01 Delta CTT (\\(\\Delta\\)CTT) (difference in colonisations through time) between the ideal and empirical data. error_metrics$delta_ctt #&gt; [1] 0.17155232 0.11695078 0.14791992 0.07678659 0.14403409 0.14486446 #&gt; [7] 0.12221146 0.11226794 0.04766100 0.12277885 0.07824080 0.12537940 #&gt; [13] 0.17947178 0.09771132 0.10608182 0.09426436 0.11128204 0.08052833 #&gt; [19] 0.14026127 0.15026305 0.08950161 0.16149038 0.06570476 0.10174456 #&gt; [25] 0.11555421 0.12137929 0.12067028 0.09847416 0.11214094 0.12464379 #&gt; [31] 0.10306867 0.13009035 0.12464288 0.15585429 0.17651730 0.14776988 #&gt; [37] 0.12273101 0.09836984 0.14499881 0.15081492 0.13135130 0.16710886 #&gt; [43] 0.13547439 0.15243449 0.13594079 0.12404993 0.07058998 0.08583650 #&gt; [49] 0.09308716 0.14313386 0.05876224 0.16236322 0.11175274 0.09712582 #&gt; [55] 0.12472783 0.13606670 0.15919436 0.11084444 0.10562117 0.08244299 #&gt; [61] 0.12169974 0.14242685 0.18316439 0.06892195 0.11628010 0.11634245 #&gt; [67] 0.16297475 0.16968625 0.05038661 0.08744617 0.20206509 0.07073775 #&gt; [73] 0.12597444 0.07686876 0.07693023 0.13157247 0.15216802 0.14162742 #&gt; [79] 0.12711394 0.07499071 0.09835805 0.11799740 0.10644828 0.13006720 #&gt; [85] 0.08739035 0.13488771 0.08041684 0.11975591 0.16024984 0.16527204 #&gt; [91] 0.20883705 0.11701884 0.08961436 0.10196080 0.12944348 0.17224067 #&gt; [97] 0.16286731 0.10224647 0.11633248 0.09333321 Percentage of maximum island age colonisations (i.e. colonisations where the most recent colonisation time extracted from the phylogenetic data is older than the island) for the ideal and empirical data (only including colonisations that survive to the present). The ideal max age percentage is always zero as it is always known exactly when the species colonised the island, but is still calculated to check it is zero. The empirical max age percent can be any percent [0, 100]. error_metrics$max_age_percent #&gt; $ideal_max_age #&gt; [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #&gt; [39] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #&gt; [77] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #&gt; #&gt; $empirical_max_age #&gt; [1] 34.883721 24.242424 28.947368 10.714286 21.428571 32.142857 28.125000 #&gt; [8] 24.242424 14.285714 30.952381 19.444444 34.375000 26.086957 24.324324 #&gt; [15] 36.666667 21.621622 20.930233 28.205128 18.421053 25.000000 18.518519 #&gt; [22] 28.571429 23.076923 23.529412 38.461538 33.333333 23.529412 21.875000 #&gt; [29] 30.303030 31.034483 29.032258 27.777778 18.750000 23.333333 38.888889 #&gt; [36] 33.333333 26.470588 22.580645 34.482759 35.000000 21.951220 34.375000 #&gt; [43] 30.555556 36.363636 20.833333 34.482759 25.000000 14.285714 20.000000 #&gt; [50] 17.647059 8.695652 27.777778 21.428571 18.181818 25.000000 37.142857 #&gt; [57] 51.851852 28.571429 25.000000 28.571429 21.428571 27.500000 48.571429 #&gt; [64] 13.333333 30.000000 18.750000 29.629630 38.636364 17.500000 20.454545 #&gt; [71] 37.931034 27.272727 27.500000 21.052632 18.918919 32.000000 23.529412 #&gt; [78] 22.222222 34.285714 39.393939 20.512821 30.769231 23.684211 20.000000 #&gt; [85] 14.285714 24.324324 23.076923 21.621622 20.689655 27.027027 23.333333 #&gt; [92] 36.363636 28.000000 28.571429 28.571429 25.000000 31.034483 22.580645 #&gt; [99] 26.666667 28.571429 Percent of endemic species at the present. This includes counts of the number of endemic and non-endemic species in the ideal and empirical data, as well as the calculation of the percentage of endemic species in each data set. error_metrics$endemic_percent #&gt; $ideal_endemic_percent #&gt; [1] 96.66667 92.55319 95.50562 94.73684 95.23810 97.80220 93.54839 #&gt; [8] 98.76543 93.10345 95.55556 88.42105 94.87179 97.45763 92.47312 #&gt; [15] 94.84536 96.52174 94.49541 97.65625 97.88732 95.89041 94.36620 #&gt; [22] 98.18182 94.49541 97.05882 95.12195 97.01493 93.54839 92.23301 #&gt; [29] 92.68293 97.26027 96.80000 94.50549 96.38554 98.82353 94.00000 #&gt; [36] 97.19626 95.45455 98.93617 96.84211 97.10145 93.10345 96.62921 #&gt; [43] 96.51163 99.15966 93.33333 95.18072 95.14563 97.70115 96.22642 #&gt; [50] 97.36842 97.22222 96.99248 96.46018 95.00000 93.89313 96.73913 #&gt; [57] 94.73684 93.82716 94.50549 92.40506 98.48485 96.66667 96.26168 #&gt; [64] 91.30435 96.70330 96.25000 95.77465 99.27536 98.01980 89.89899 #&gt; [71] 96.15385 96.15385 98.84393 100.00000 87.95181 97.36842 94.87179 #&gt; [78] 91.52542 93.61702 97.95918 92.30769 95.58824 93.82716 95.00000 #&gt; [85] 89.18919 92.55319 96.46018 94.79167 96.05263 94.69027 93.58974 #&gt; [92] 94.11765 88.05970 95.12195 91.42857 95.89041 93.65079 96.85039 #&gt; [99] 99.04762 96.47059 #&gt; #&gt; $empirical_endemic_percent #&gt; [1] 97.50000 92.55319 98.87640 94.73684 96.82540 97.80220 94.62366 #&gt; [8] 98.76543 96.55172 97.03704 90.52632 94.87179 97.45763 95.69892 #&gt; [15] 96.90722 97.39130 98.16514 97.65625 98.59155 97.26027 94.36620 #&gt; [22] 98.18182 95.41284 100.00000 95.12195 97.76119 96.77419 93.20388 #&gt; [29] 96.34146 100.00000 96.80000 95.60440 96.38554 98.82353 95.00000 #&gt; [36] 99.06542 95.45455 98.93617 98.94737 97.10145 96.55172 97.75281 #&gt; [43] 96.51163 100.00000 96.66667 95.18072 97.08738 97.70115 98.11321 #&gt; [50] 98.24561 97.22222 97.74436 100.00000 96.25000 96.18321 97.82609 #&gt; [57] 95.78947 97.53086 96.70330 93.67089 100.00000 98.33333 97.19626 #&gt; [64] 95.65217 96.70330 98.75000 95.77465 99.27536 99.00990 90.90909 #&gt; [71] 97.43590 96.15385 100.00000 100.00000 92.77108 98.68421 96.15385 #&gt; [78] 96.61017 95.74468 98.97959 94.23077 95.58824 93.82716 96.25000 #&gt; [85] 90.54054 95.74468 96.46018 97.91667 97.36842 97.34513 97.43590 #&gt; [92] 95.29412 88.05970 95.93496 94.28571 97.26027 96.82540 97.63780 #&gt; [99] 100.00000 96.47059 #&gt; #&gt; $ideal_endemics #&gt; [1] 116 87 85 72 60 89 87 80 54 129 84 74 115 86 92 111 103 125 139 #&gt; [20] 70 67 54 103 99 117 130 87 95 76 71 121 86 80 84 94 104 84 93 #&gt; [39] 92 134 108 86 83 118 56 79 98 85 102 111 70 129 109 76 123 89 90 #&gt; [58] 76 86 73 65 116 103 63 88 77 68 137 99 89 75 50 171 125 73 74 #&gt; [77] 74 54 88 96 96 65 76 76 66 87 109 91 73 107 73 80 59 117 64 #&gt; [96] 70 59 123 104 82 #&gt; #&gt; $ideal_non_endemics #&gt; [1] 4 7 4 4 3 2 6 1 4 6 11 4 3 7 5 4 6 3 3 3 4 1 6 3 6 #&gt; [26] 4 6 8 6 2 4 5 3 1 6 3 4 1 3 4 8 3 3 1 4 4 5 2 4 3 #&gt; [51] 2 4 4 4 8 3 5 5 5 6 1 4 4 6 3 3 3 1 2 10 3 2 2 0 10 #&gt; [76] 2 4 5 6 2 8 3 5 4 8 7 4 5 3 6 5 5 8 6 6 3 4 4 1 3 #&gt; #&gt; $empirical_endemics #&gt; [1] 117 87 88 72 61 89 88 80 56 131 86 74 115 89 94 112 107 125 140 #&gt; [20] 71 67 54 104 102 117 131 90 96 79 73 121 87 80 84 95 106 84 93 #&gt; [39] 94 134 112 87 83 119 58 79 100 85 104 112 70 130 113 77 126 90 91 #&gt; [58] 79 88 74 66 118 104 66 88 79 68 137 100 90 76 50 173 125 77 75 #&gt; [77] 75 57 90 97 98 65 76 77 67 90 109 94 74 110 76 81 59 118 66 #&gt; [96] 71 61 124 105 82 #&gt; #&gt; $empirical_non_endemics #&gt; [1] 3 7 1 4 2 2 5 1 2 4 9 4 3 4 3 3 2 3 2 2 4 1 5 0 6 3 3 7 3 0 4 4 3 1 5 1 4 1 #&gt; [39] 1 4 4 2 3 0 2 4 3 2 2 2 2 3 0 3 5 2 4 2 3 5 0 2 3 3 3 1 3 1 1 9 2 2 0 0 6 1 #&gt; [77] 3 2 4 1 6 3 5 3 7 4 4 2 2 3 2 4 8 5 4 2 2 3 0 3 Overall, all of these error metrics can be computed using calc_error() with the simulated data and the maximum likelihood estimates. errors &lt;- DAISIEmainland::calc_error( daisie_mainland_data = daisie_mainland_data, ideal_ml = ideal_ml, empirical_ml = empirical_ml ) The code displayed in this chapter is a simplified version of the script used to carry out the full inference performance analysis can be found at DAISIEmainland/scripts/run_analysis.R in the DAISIEmainland package. "],["summary-error-metrics-visualisation.html", "5 Summary and error metrics visualisation 5.1 Simulation summary metrics 5.2 Inference error metrics", " 5 Summary and error metrics visualisation There is a range of plotting functions to visualise the summary metrics and error metrics (Section 4.3). For the plotting of simulation summary and error metrics we need to load the results from multiple different mainland extinction scenarios. analysis_results &lt;- DAISIEmainland::read_analysis_results( data_folder_path = system.file( &quot;/inst/book/data/param_sets/&quot;, package = &quot;DAISIEmainland&quot; ) ) 5.1 Simulation summary metrics First we run the simulation. This is the same simulation as in the inference performance section (Section 4.1). set.seed( 1, kind = &quot;Mersenne-Twister&quot;, normal.kind = &quot;Inversion&quot;, sample.kind = &quot;Rejection&quot;) replicates &lt;- 100 daisie_mainland_data &lt;- DAISIEmainland::sim_island_with_mainland( total_time = 1, m = 100, island_pars = c(0.5, 02.5, 50, 0.01, 0.5), mainland_ex = 1.0, mainland_sample_prob = 1, mainland_sample_type = &quot;complete&quot;, replicates = replicates, verbose = FALSE ) The simulation summary metrics we can calculate for the ideal and empirical data are: number of species on the island at the end of the simulation. number of colonisation events to the island (that survived to the present) at the end of the simulation. ideal_sim_num_spec &lt;- DAISIEmainland::calc_num_spec( multi_daisie_data = daisie_mainland_data$ideal_multi_daisie_data ) ideal_sim_num_spec #&gt; [1] 120 94 89 76 63 91 93 81 58 135 95 78 118 93 97 115 109 128 142 #&gt; [20] 73 71 55 109 102 123 134 93 103 82 73 125 91 83 85 100 107 88 94 #&gt; [39] 95 138 116 89 86 119 60 83 103 87 106 114 72 133 113 80 131 92 95 #&gt; [58] 81 91 79 66 120 107 69 91 80 71 138 101 99 78 52 173 125 83 76 #&gt; [77] 78 59 94 98 104 68 81 80 74 94 113 96 76 113 78 85 67 123 70 #&gt; [96] 73 63 127 105 85 ideal_sim_num_col &lt;- DAISIEmainland::calc_num_col( multi_daisie_data = daisie_mainland_data$ideal_multi_daisie_data ) ideal_sim_num_col #&gt; [1] 44 33 39 28 29 30 33 35 28 42 36 32 46 38 30 38 45 40 40 28 28 28 41 34 39 #&gt; [26] 45 34 32 33 29 31 36 33 32 38 34 36 31 29 41 43 34 36 34 24 30 33 28 42 37 #&gt; [51] 24 37 43 33 45 35 27 37 37 28 29 40 36 30 31 32 27 48 40 47 30 22 41 38 37 #&gt; [76] 27 35 28 37 33 40 27 38 30 35 38 39 37 30 37 31 33 25 42 35 37 29 31 31 36 empirical_sim_num_spec &lt;- DAISIEmainland::calc_num_spec( multi_daisie_data = daisie_mainland_data$empirical_multi_daisie_data ) empirical_sim_num_spec #&gt; [1] 120 94 89 76 63 91 93 81 58 135 95 78 118 93 97 115 109 128 142 #&gt; [20] 73 71 55 109 102 123 134 93 103 82 73 125 91 83 85 100 107 88 94 #&gt; [39] 95 138 116 89 86 119 60 83 103 87 106 114 72 133 113 80 131 92 95 #&gt; [58] 81 91 79 66 120 107 69 91 80 71 138 101 99 78 52 173 125 83 76 #&gt; [77] 78 59 94 98 104 68 81 80 74 94 113 96 76 113 78 85 67 123 70 #&gt; [96] 73 63 127 105 85 empirical_sim_num_col &lt;- DAISIEmainland::calc_num_col( multi_daisie_data = daisie_mainland_data$empirical_multi_daisie_data ) empirical_sim_num_col #&gt; [1] 43 33 38 28 28 28 32 33 28 42 36 32 46 37 30 37 43 39 38 28 27 28 39 34 39 #&gt; [26] 45 34 32 33 29 31 36 32 30 36 33 34 31 29 40 41 32 36 33 24 29 32 28 40 34 #&gt; [51] 23 36 42 33 44 35 27 35 36 28 28 40 35 30 30 32 27 44 40 44 29 22 40 38 37 #&gt; [76] 25 34 27 35 33 39 26 38 30 35 37 39 37 29 37 30 33 25 42 35 36 29 31 30 35 We can plot the simulation summary metrics to view the mean, variance, maximum and minimum number of colonisations and number of species for the ideal and empirical data. plot_sim_metrics( analysis_results = analysis_results, output_file_path = NULL ) 5.2 Inference error metrics The error metrics were run for a range of mainland extinction rates. Then, the error metrics can be plotted across different rates to determine how the error varies with faster or slower mainland evolutionary dynamics. Thus, plotting the \\(\\Delta\\)CTT across mainland extinction rates between zero and two (per species per million years) is informative. As explained in Section 4.3 this metric is a comparison between the ideal and empirical data sets produced by the DAISIEmainland simulation. plot_ctt_boxplot( analysis_results = analysis_results, output_file_path = NULL, parameter = &quot;mainland_ex&quot; ) The percentage of endemics on the island at the end of the simulation and percentage of maximum age colonisation times can be plotted for different values of mainland extinction. Each of the boxplots below is obtained from 100 island replicates. The left hand panel is for the data set with complete information (ideal) and the right hand panel is for the data set with incomplete information (empirical). plot_endemics( analysis_results = analysis_results, output_file_path = NULL, parameter = &quot;mainland_ex&quot; ) plot_max_age( analysis_results = analysis_results, output_file_path = NULL, parameter = &quot;mainland_ex&quot; ) The plots shown in this chapter are not an exhaustive list available from the package. For example, error metrics can also be plotted across different values of mainland sampling probability by setting the parameter = \"mainland_sample_prob\" in the plotting functions. The script used to make the plots for the two manuscripts using this package can be found at DAISIEmainland/scripts/joss_data_vis.R and DAISIEmainland/scripts/evolution_data_vis.R, respectively, in the DAISIEmainland package. "],["references.html", "6 References", " 6 References "],["data-standards.html", "A Data standards A.1 Reasoning A.2 Data structure types", " A Data standards A.1 Reasoning There are several data types used in this package. Some of them are novel to this package and are not used elsewhere, others derive from other R packages. This document provides a standard of how the data types are formatted and which functions allow for checking the types. To make sure the data types are correctly formatted there is a corresponding check_* function for each. A.2 Data structure types A.2.1 daisie_mainland_data A list of 2 elements, $ideal_multi_daisie_data and $empirical_multi_daisie_data. Each of these elements is in the format multi_daisie_data (see below). This is the output of DAISIEmainland::sim_island_with_mainland(). Function to check if it is a daisie_mainland_data is DAISIEmainland::check_daisie_mainland_data() A.2.2 multi_daisie_data A list of daisie_data elements (see below). This is the data structure when the simulation is run for several replicates. Function to check if it is a multi_daisie_data is DAISIEmainland::check_multi_daisie_data(). A.2.3 daisie_data A list of n elements. The first element is a list containing the island_age with a single numeric, and the number of species not_present on the island. This first element in the daisie_data list can optionally include an stt_table. The stt_table is a matrix with five columns and a variable number of rows. Every subsequent element in the daisie_data list is data on an island clade, containing: branching_times, stac, missing_species, and optionally information on recolonisations all_colonisations. branching_times is a numeric vector containing the island age, time of island colonisation, and an subsequent branching times (all given in time before the present). daisie_data is a single element of a multi_daisie_data list. Function to check if it is a daisie_data is DAISIEmainland::check_daisie_data(). A.2.4 multi_mainland_clade A list of mainland_clade objects. This data type is output from DAISIEmainland::sim_mainland(). Function to check if it is a multi_mainland_clade is DAISIEmainland::check_multi_mainland_clade(). A.2.5 mainland_clade A data frame of seven columns and one or more rows. The column names are: spec_id, main_anc_id, spec_type, branch_code, branch_t, spec_origin_t, spec_ex_t. A example of an mainland_clade can be created using DAISIEmainland::create_test_mainland_clade(). Function to check if it is a mainland_clade is DAISIEmainland::check_mainland_clade() A.2.6 island_tbl A data frame of the island species output from sim_island and then converted to the daisie_data format by create_island. This data type is output from DAISIEmainland::sim_island(). A example of an island_tbl can be created using DAISIEmainland::create_test_island_tbl(). Function to check if it is a island_tbl is DAISIEmainland::check_island_tbl(). "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
